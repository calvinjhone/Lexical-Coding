## Peer-Graded Assignment; 

## A matrix object that can cache its inverse 

makeCacheMatrix <- function(x = matrix()) { ## argument is default mode of matrix
    inv <- NULL                             ## initializing null
    set <- function(y) {                    ## set function to new
        x <<- y                             ## value of matrix in parent environment
        inv <<- NULL                        ## inv to null if matrix is new
    get <- function() x                     ## define get function
    
    setinverse <- function(inverse) inv <<- inverse  ## assign inv
    getinverse <- function() inv                     ## obtain value of inv
    list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)  ## $ refers the function 
                                                                                 
}


## computes the inverse of makeCacheMatrix
## cacheSolve will calculate and retrieve the inverse

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
    inv <- x$getinverse()
    if(!is.null(inv)) {
        message("getting cached data")
        return(inv)
    }
    data <- x$get()
    inv <- solve(data, ...)
    x$setinverse(inv)
    inv
}
